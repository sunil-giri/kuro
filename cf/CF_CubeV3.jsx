/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/CF_CubeV3.glb --precision=10 --shadows 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'

export function Model(props) {
  const { nodes, materials } = useGLTF('/CF_CubeV3.glb')
  return (
    <group {...props} dispose={null}>
      <group position={[0,0,0]} rotation={[0, 0, 0]} scale={1}>
        <mesh castShadow receiveShadow geometry={nodes.BaseCube.geometry} material={materials.Whitemat} position={[0.5814874768, -0.6388695836, -0.5585965514]} scale={[0.2804277837, 0.2804278135, 0.2804277837]} />
        <group position={[0.5814873576, -0.6388695836, 0.5631147027]} scale={[0.2804277837, 0.2804278135, 0.2804277837]}>
          <mesh castShadow receiveShadow geometry={nodes.Cube028.geometry} material={materials.Whitemat} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_1.geometry} material={materials.Cam} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_2.geometry} material={materials.Music2} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_3.geometry} material={materials.VR2} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_4.geometry} material={materials.GroupDiscussion} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_5.geometry} material={materials.Draw1} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_6.geometry} material={materials.Explore} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_7.geometry} material={materials.Ideation} />
          <mesh castShadow receiveShadow geometry={nodes.Cube028_8.geometry} material={materials.movcam} />
          <mesh castShadow receiveShadow geometry={nodes.Lplane.geometry} material={new THREE.MeshStandardMaterial({opacity:0,transparent:true})} position={[-5.0101242065, 1.9937468767, -1.9727778435]} rotation={[Math.PI / 2, -5.96e-8, 1.5705240713]} />
        </group>
        <group position={[0.5814873576, -0.6388695836, 0.5631147027]} scale={[0.2804277837, 0.2804278135, 0.2804277837]}>
          <mesh castShadow receiveShadow geometry={nodes.Cube027.geometry} material={materials.Whitemat} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_1.geometry} material={materials.Headset} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_2.geometry} material={materials.StillCam} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_3.geometry} material={materials.Film} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_4.geometry} material={materials.Scope} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_5.geometry} material={materials.Action} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_6.geometry} material={materials.OurTeam} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_7.geometry} material={materials.Rocket} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_8.geometry} material={materials.VR} />
          <mesh castShadow receiveShadow geometry={nodes.Cube027_9.geometry} material={materials.TV} />
          <mesh castShadow receiveShadow geometry={nodes.Rplane.geometry} material={new THREE.MeshStandardMaterial({opacity:0,transparent:true})} position={[-1.9972660542, 1.9937468767, 1.0059008598]} rotation={[Math.PI / 2, 0, -0.0002724083]} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/CF_CubeV3.glb')
